generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String
  apiKey        String?  @unique
  isActive      Boolean  @default(true)
  role          UserRole @default(MERCHANT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  wallets       Wallet[]
  payments      Payment[]
  transactions  Transaction[]
  
  @@map("users")
}

model Wallet {
  id            String   @id @default(cuid())
  userId        String
  currency      String   // BTC, ETH, USDT, sBTC, STX
  address       String   @unique
  privateKey    String?  // Encrypted
  publicKey     String?
  balance       Decimal  @default(0) @db.Decimal(18, 8)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  payments      Payment[]
  transactions  Transaction[]
  
  @@index([userId, currency])
  @@map("wallets")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  walletId        String
  amount          Decimal       @db.Decimal(18, 8)
  currency        String
  usdAmount       Decimal?      @db.Decimal(10, 2)
  memo            String?
  description     String?
  status          PaymentStatus @default(PENDING)
  paymentAddress  String
  qrCodeUrl       String?
  webhookUrl      String?
  expiresAt       DateTime?
  confirmedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  wallet          Wallet        @relation(fields: [walletId], references: [id])
  transactions    Transaction[]
  
  @@index([userId, status])
  @@index([paymentAddress])
  @@index([status, createdAt])
  @@map("payments")
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  paymentId       String?
  walletId        String
  txHash          String            @unique
  blockHash       String?
  blockNumber     Int?
  fromAddress     String
  toAddress       String
  amount          Decimal           @db.Decimal(18, 8)
  currency        String
  gasUsed         Decimal?          @db.Decimal(18, 8)
  gasPrice        Decimal?          @db.Decimal(18, 8)
  fee             Decimal?          @db.Decimal(18, 8)
  confirmations   Int               @default(0)
  status          TransactionStatus @default(PENDING)
  type            TransactionType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  wallet          Wallet            @relation(fields: [walletId], references: [id])
  
  @@index([userId, status])
  @@index([txHash])
  @@index([paymentId])
  @@index([status, createdAt])
  @@map("transactions")
}

model CurrencyRate {
  id        String   @id @default(cuid())
  currency  String   @unique
  usdRate   Decimal  @db.Decimal(18, 8)
  updatedAt DateTime @updatedAt
  
  @@map("currency_rates")
}

model WebhookLog {
  id          String    @id @default(cuid())
  url         String
  event       String
  payload     Json
  status      String
  attempts    Int       @default(1)
  lastError   String?
  createdAt   DateTime  @default(now())
  
  @@index([status, createdAt])
  @@map("webhook_logs")
}

enum PaymentStatus {
  PENDING
  PARTIAL
  CONFIRMED
  EXPIRED
  FAILED
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum TransactionType {
  INCOMING
  OUTGOING
  INTERNAL
}

enum UserRole {
  MERCHANT
  ADMIN
}
